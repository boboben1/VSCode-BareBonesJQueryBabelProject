{"version":3,"sources":["../src/levenshtein.js"],"names":["collator","Intl","Collator","sensitivity","err","console","log","prevRow","str2Char","Levenshtein","get","str1","str2","options","useCollator","str1Len","length","str2Len","curCol","nextCol","i","j","tmp","charCodeAt","strCmp","compare","charAt","String","fromCharCode","define","amd","module","exports","self","postMessage","importScripts","window"],"mappings":"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","file":"levenshtein.js","sourcesContent":["\"use strict\";\n\n(function () {\n  'use strict';\n\n  var collator;\n  try {\n    collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n  // arrays to re-use\n  var prevRow = [],\n      str2Char = [];\n\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function get(str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n\n      var str1Len = str1.length,\n          str2Len = str2.length;\n\n      // base cases\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len;\n\n      // two rows\n      var curCol, nextCol, i, j, tmp;\n\n      // initialise previous row\n      for (i = 0; i < str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n      prevRow[str2Len] = str2Len;\n\n      var strCmp;\n      if (useCollator) {\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      } else {\n        // calculate current row distance from previous row without collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      return nextCol;\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n      module.exports = Levenshtein;\n    }\n    // web worker\n    else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n        self.Levenshtein = Levenshtein;\n      }\n      // browser main thread\n      else if (typeof window !== \"undefined\" && window !== null) {\n          window.Levenshtein = Levenshtein;\n        }\n})();\n//# sourceMappingURL=levenshtein.js.map"]}